#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");

/**
 * Create HTTP server.
 */

console.log("test");
var server = http.createServer(app);

var io = require("socket.io")(server);

io.on("connection", function (socket) {
  console.log("a user connected");

  socket.on("sendMessage", function (message) {
    console.log("Hello from Backend: ", message);

    io.emit("sendMessageToAll", message);
    // socket.broadcast.emit("sendMessageToAll", message);
    // io.broadcast.emit("sendMessageToAll", message);
  });

  socket.on("sendLocation", function (location) {
    console.log("Hello from Backend: ", location);

    // io.emit("sendLocationToAll", location);
    socket.broadcast.emit("sendLocationAll", location);
    // io.broadcast.emit("sendMessageToAll", message);
  });
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
